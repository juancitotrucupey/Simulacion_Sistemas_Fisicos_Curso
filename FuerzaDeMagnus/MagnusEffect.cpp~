// UnPlaneta[i] por LeapFrog
#include <iostream>
#include <cmath>
#include "Vector.h"
using namespace std;

// Se manejan unidades SI, i.e. Kg, m, s
const double g = 9.8;
const double Ca = 0.5;
const double Ro = 1.2;
const double Alpha = 0.001;
const double Mu = 1.83e-5;
// const double G=1.0;
const double CHI   =0.1786178958448091;
const double LAMBDA=-0.2123418310626054;
const double XI    =-0.06626458266981849;
const double uno_m2LAMBDA_S2=(1-2*LAMBDA)/2;
const double uno_m2_XIplusCHI=(1-2*(XI+CHI));
//const vector3D Gra = (0,0,9.8);

const int N=1; //n√∫mero de Balones


//............................
class Cuerpo;
class Colisionador;
//............................
class Cuerpo{
private:
  vector3D r, V, F, W, T;
  double m,R,A,I;
public:
  void Inicie(double x0,double y0, double z0, double Vx0,double Vy0, double Vz0, double Wx0, double Wy0, double Wz0, double m0,double R0);
  void CalculeFuerza(void);
  // void BorreFuerza(void);
  // void AdicioneFuerza(vector3D F0);
  //void AdicioneTorque(vector3D T0);
  void Mueva_r(double dt,double CTE);
  void Mueva_V(double dt,double CTE);
   void Dibujese(void);
  vector3D GetV(void){return V;}; //Funcion inline (macro) 
  double Getx(void){return r.x();}; //Funcion inline (macro)
  double Gety(void){return r.y();}; //Funcion inline (macro)
  double Getz(void){return r.z();}; //Funcion inline (macro)
  
  //  friend class Colisionador;
};
void Cuerpo::Inicie(double x0,double y0,double z0,double Vx0,double Vy0,double Vz0, double Wx0, double Wy0, double Wz0, double m0,double R0){
  r.cargue(x0,y0,z0); V.cargue(Vx0,Vy0,Vz0); W.cargue (Wx0,Wy0,Wz0); m=m0;  R=R0; I=2.0*m*R*R/5; A = M_PI*R*R;
}
/*void Cuerpo::CalculeFuerzaGravedad(void){
 
  F=;
}
*/
void Cuerpo::CalculeFuerza(void){
  double normaV= norma(V); double aux = 0.5*Ca*Ro*A*normaV; vector3D cruz = (W^V); double normaCruz = norma(cruz);

  F.cargue(0,0,-m*g); // Fuerza de Gravedad
   F+=(-1)*V*aux; // Fuerza de Arrastre
   // F+= cruz*aux*normaV/normaCruz; //Fuerza de Magnus
   //  T=(-1)*Alpha*W;// Torque
    }
/*void Cuerpo::CalculeTorque(void)
{
   	T=-Alpha*Wa;
}

void Cuerpo::BorreFuerza(void){
	F.cargue(0,0,0);
}
*/
/*void Cuerpo::BorreTorque(void){
  T.cargue(0,0,0);
}

void Cuerpo::AdicioneFuerza(vector3D F0){
	F+=F0;
}
void Cuerpo::AdicioneTorque(vector3D T0){
  T*=T0;
}
*/
void Cuerpo::Mueva_r(double dt,double CTE){
  r+=V*CTE*dt;
}
void Cuerpo::Mueva_V(double dt,double CTE){
  V+=F*(CTE*dt/m);
  //  W+=T*(CTE*dt/I);
}
void Cuerpo::Dibujese(void){
  cout<<", "<<r.x()<<"+"<<R<<"*cos(t),"<<r.y()<<"+"<<R<<"*sin(t)";
}
//-------------------------------------
void InicieAnimacion(void){
  //  cout<<"set terminal gif animate"<<endl; 
  //  cout<<"set output 'MiBalon.gif'"<<endl;
  cout<<"unset key"<<endl;
  cout<<"set xrange [0:90]"<<endl;
  cout<<"set yrange [0:120]"<<endl;
  cout<<"set size ratio -1"<<endl;
  cout<<"set parametric"<<endl;
  cout<<"set trange [0:7]"<<endl;
  cout<<"set isosamples 12"<<endl;  
}
void InicieCuadro(void){
    cout<<"plot 0,0 ";
}
void TermineCuadro(void){
    cout<<endl;
}
/*
//.-.--.-.-.-.-.-.-.-.-.CLASE COLISIONADOR.-.-.-.-.-.-.-.-.-.-.--.-.-.-.
class Colisionador{
	private:
	public:
		void CalculeFuerzaFriccion(Cuerpo * Balon);
  void CalculeFuerzaMagnus (Cuerpo * Balon);
   void CalculeTodasLasFuerzas (Cuerpo * Balon);
};

void Colisionador::CalculeTodasLasFuerzas (Cuerpo * Balon){
  int i;
  vector3D Gra;
  Gra.cargue(0,0,9,8); 
	//Borrar las fuerzas de todos los planetas
	for(i=0; i<N; i++)
		Balon[i].BorreFuerza();
		//Hacer todas las parejas entre planetas y calcular la fuerza en cada pareja
		for(i=0; i<N; i++)
		  {
		  //for(j=0;j<i;j++)
		    Balon.AdicioneFuerza(Gra*Balon.m);
				CalculeFuerzaFriccion(Balon[i]);
				CalculeFuerzaMagnus(Balon[i]);
				CalculeFuerzaTorque(Balon[i]);
}
}

void Colisionador::CalculeFuerzaFriccion(Cuerpo * Balon){
  vector3D Va = Balon.V;
  double aux=-Ca*Ro*M_PI*pow(Balon.R,2)*norma(Va)/2;
	vector3D F2=Va*aux;
	Balon.AdicioneFuerza(F2);
}

void Colisionador::CalculeFuerzaFriccion(Cuerpo * Balon){
  vector3D Va = (Balon.W^Balon.V);
  double aux1 = norma(Va);
  double aux2 = Ca*Ro*M_PI*pow(Balon.R,2)*norma2(Va)/2;
	vector3D F2=Va*aux1/aux2;
	Balon.AdicioneFuerza(F2);
}
*/

int main(void){
  Cuerpo Balon;
  //Colisionador Chanfle;
  double t,dt=0.001;
  double r=0.11, m0=0.43;
  double tmax;
  double tdibujo, ndibujos=10000;
  double Alpha1 = 13.3*M_PI/180;
  double Beta = 17*M_PI/180;
  double V = 30.4;
  vector3D Vel;
  double Balony;
  Balony=Balon.Gety();  
  //  int i;
  tmax=10;
  
  // InicieAnimacion();
  //  void Inicie(double x0,double y0, double z0, double Vx0,                  double Vy0,       double Vz0, double Wx0, double Wy0, double Wz0, double m0,double R0); 
  Balon.Inicie(47,       88,            0,     V*cos(Beta)*sin(Alpha1), V*cos(Beta)*cos(Alpha1), V*sin(Beta),      0,   -2, 30,      m0, r);
  //Planeta[1].Inicie(x1,0,0,0,V1,0,m1,1);//Tierra

  
  //------------(x0,y0,Vx0,Vy0,m0   ,R0);

   for(t=0,tdibujo=0;Balony<120 ;t+=dt,tdibujo+=dt){
     Vel=Balon.GetV();
     Balony=Balon.Gety();
     cout<<Balon.Getx()<<" "<<Balon.Gety()<<endl;

     //Animacion
     /*
    if(tdibujo>tmax/ndibujos){
      InicieCuadro();
      Balon.Dibujese();
      TermineCuadro();
      tdibujo=0;
    }
     */
    Balon.Mueva_r(dt,CHI);
    Balon.CalculeFuerza(); Balon.Mueva_V(dt,uno_m2LAMBDA_S2);
    Balon.Mueva_r(dt,XI);
    Balon.CalculeFuerza(); Balon.Mueva_V(dt,LAMBDA); 
    Balon.Mueva_r(dt,uno_m2_XIplusCHI);
    Balon.CalculeFuerza(); Balon.Mueva_V(dt,LAMBDA); 
    Balon.Mueva_r(dt,XI);
    Balon.CalculeFuerza(); Balon.Mueva_V(dt,uno_m2LAMBDA_S2);
    Balon.Mueva_r(dt,CHI);

  }
   /*
	for(t=0,tdibujo=0;t<tmax;t+=dt,tdibujo+=dt){
	  for(i=0; i<N; i++)cout<<Balon[i].Getx()<<" "<<Balon[i].Gety()<<endl;
		//Animacion

	  	  
		if(tdibujo>tmax/ndibujos){
			InicieCuadro();
			for(i=0; i<N; i++) Balon[i].Dibujese();
			TermineCuadro();
			tdibujo=0;
			}
	  
		for(i=0; i<N; i++) Balon[i].Mueva_r(dt,CHI);
		Balon[i].CalculeFuerza(); for(i=0; i<N; i++) Balon[i].Mueva_V(dt,uno_m2LAMBDA_S2);
		for(i=0; i<N; i++) Balon[i].Mueva_r(dt,XI);
		Balon[i].CalculeFuerza(); for(i=0; i<N; i++) Balon[i].Mueva_V(dt,LAMBDA);
		for(i=0; i<N; i++) Balon[i].Mueva_r(dt,uno_m2_XIplusCHI);
		Balon[i].CalculeFuerza(); for(i=0; i<N; i++) Balon[i].Mueva_V(dt,LAMBDA);
		for(i=0; i<N; i++) Balon[i].Mueva_r(dt,XI);
		Balon[i].CalculeFuerza(); for(i=0; i<N; i++) Balon[i].Mueva_V(dt,uno_m2LAMBDA_S2);
		for(i=0; i<N; i++) Balon[i].Mueva_V(dt,CHI);
			}
*/
  return 0;
}
