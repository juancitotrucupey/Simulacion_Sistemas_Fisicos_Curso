#include <iostream>
#include <cmath>

using namespace std;


double f1 (double x1 , double x2, double r, double Lambda)
{
  return x2;
}
double f2(double x1, double x2,double r, double Lambda)
{
  return -(r*x2 + pow(Lambda,2)*pow(r,2)*x1)/pow(r,2);
}



void UnPasoRungeKutta4Acoplado(double & x1, double & x2, double & r, double dr, double Lambda)
{ double dx11, dx12, dx13, dx14;                      double dx21, dx22, dx23, dx24;
  
  dx11=dr*f1(x1,x2,r,Lambda);                                dx21=dr*f2(x1,x2,r,Lambda);
  dx12 = dr*f1(x1+dx11/2,x2+dx21/2,r+dr/2,Lambda);           dx22 = dr*f2(x1+dx11/2,x2+dx21/2,r+dr/2,Lambda);
  dx13 = dr*f1(x1+dx12/2,x2+dx22/2,r+dr/2,Lambda);           dx23 = dr*f2(x1+dx12/2,x2+dx22/2,r+dr/2,Lambda);
  dx14 = dr*f1(x1+dx13,x2 + dx23,r+dr,Lambda);               dx24 = dr*f2(x1+dx13,x2 + dx23,r+dr,Lambda);
  
  x1+=(dx11 + 2*dx12 + 2*dx13 + dx14)/6;               x2+=(dx21 + 2*dx22 + 2*dx23 + dx24)/6;
  r+=dr;
}

double FuncionRen1 (double Lambda)
{

  double r,x1,x2;
  double dr=0.01;
  
  for(r=0.01,x1=1,x2=0;r<=1.0;)
    {
      UnPasoRungeKutta4Acoplado(x1,x2,r,dr,Lambda);
    }
  

  return x1;
}

int main(void){
  double Lambda;

  for(Lambda=0.01;Lambda<=15.0;Lambda+=0.01)
    {
      cout<<Lambda<<" "<<FuncionRen1(Lambda)<<endl;
    }

 
  
  return 0;
}
